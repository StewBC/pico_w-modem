# Set to @ if you want to suppress command echo
CMD_ECHO = 

BIN = libwolfssh

# Important directories
BUILD_DIR = ./Build
WOLFSSL_ROOT = ./../../../wolfssl-src
PICOSDK_ROOT = ./../../../pico_sdk-src
WOLFSSH_ROOT = ./../..

WOLFSSL_MKDIR = $(WOLFSSL_ROOT)/IDE/GCC-ARM/Build
WOLFLIBS   = $(WOLFSSHLIB) $(WOLFSSL_MKDIR)/libwolfssl.a
WOLFSSHLIB = ./libwolfssh.a

# Toolchain location and prefix
#TOOLCHAIN = 
TOOLCHAIN ?= /usr/bin/arm-none-eabi-

# Tools selection
CC = $(TOOLCHAIN)gcc
AS = $(CC)
LD = $(CC)
AR = $(TOOLCHAIN)ar
NM = $(TOOLCHAIN)nm
OBJCOPY ?= $(TOOLCHAIN)objcopy
OBJDUMP ?= $(TOOLCHAIN)objdump
SIZE ?= $(TOOLCHAIN)size

# Includes
USER_SETTINGS_DIR ?= ../../../../../config/
INC = -I$(USER_SETTINGS_DIR) \
	  -I$(WOLFSSL_MKDIR) \
      -I$(WOLFSSL_ROOT) \
	  -I$(PICOSDK_ROOT)/lib/lwip/src/include \
	  -I$(PICOSDK_ROOT)/src/rp2_common/pico_lwip/include \
	  -I$(PICOSDK_ROOT)/src/rp2_common/pico_rand/include \
	  -I$(PICOSDK_ROOT)/src/boards/include/boards \
	  -I./../..

# Defines
DEF = -DWOLFSSL_USER_SETTINGS

# Architecture
#ARCHFLAGS ?= -mcpu=cortex-m4 -mthumb -mabi=aapcs -DUSE_WOLF_ARM_STARTUP
ARCHFLAGS = -mcpu=cortex-m0plus -mthumb -mabi=aapcs -DUSE_WOLF_ARM_STARTUP
#ARCHFLAGS = -mcpu=cortex-r5 -mthumb -mabi=aapcs
#ARCHFLAGS = -mcpu=cortex-a53 -mthumb -mabi=aapcs

# Compiler and linker flags
ASFLAGS ?= $(ARCHFLAGS)
CFLAGS_EXTRA ?= -Wno-cpp
CFLAGS ?= $(ARCHFLAGS) -std=gnu99 -Wall $(CFLAGS_EXTRA)
LDFLAGS ?= $(ARCHFLAGS)

# LD: Link with nosys
LDFLAGS += --specs=nosys.specs

# LD: Link with nano or rdimon implementation for standard library
LDFLAGS += --specs=nano.specs
#LDFLAGS += --specs=rdimon.specs

# LD: generate map
# LDFLAGS += -Wl,-Map=$(BUILD_DIR)/$(BIN).map

# LD: Entry point
# LDFLAGS += -Wl,-ereset_handler

# Math lib (for DH)
LIBS = -lm

# Memory Map
#SRC_LD = -T./linker.ld

# Optimization level and place functions / data into separate sections to allow dead code removal
CFLAGS += -Os -ffunction-sections -fdata-sections -fno-builtin
# Remove unused sections and link time optimizations
LDFLAGS += -Wl,--gc-sections -flto

# Debugging
DBGFLAGS = -ggdb -g3
CFLAGS += $(DBGFLAGS)
LDFLAGS += $(DBGFLAGS)

# WOLFSSH
SRC_C += $(WOLFSSH_ROOT)/src/internal.c
SRC_C += $(WOLFSSH_ROOT)/src/io.c
SRC_C += $(WOLFSSH_ROOT)/src/log.c
SRC_C += $(WOLFSSH_ROOT)/src/port.c
SRC_C += $(WOLFSSH_ROOT)/src/ssh.c
# SRC_C += $(WOLFSSH_ROOT)/src/agent.c
# SRC_C += $(WOLFSSH_ROOT)/src/keygen.c
# SRC_C += $(WOLFSSH_ROOT)/src/wolfscp.c
# SRC_C += $(WOLFSSH_ROOT)/src/wolfsftp.c
# SRC_C += $(WOLFSSH_ROOT)/src/wolfterm.c
# wolfCrypt Additional

# wolfCrypt non-standard algorithms (disabled by default)


FILENAMES_C = $(notdir $(SRC_C))
FILENAMES_C := $(filter-out evp.c, $(FILENAMES_C))
OBJS_C = $(addprefix $(BUILD_DIR)/, $(FILENAMES_C:.c=.o))
vpath %.c $(dir $(SRC_C))

all: build_static

build_hex: $(BUILD_DIR) $(BUILD_DIR)/$(BIN).hex
	@echo ""
	$(CMD_ECHO) $(SIZE) $(BUILD_DIR)/$(BIN).elf

build_static: $(BUILD_DIR) $(BUILD_DIR)/$(BIN).a
	@echo ""
	$(CMD_ECHO) $(SIZE) $(BUILD_DIR)/$(BIN).a

$(BUILD_DIR):
	$(CMD_ECHO) mkdir -p $(BUILD_DIR)

$(BUILD_DIR)/$(BIN).hex: $(BUILD_DIR)/$(BIN).elf
	@echo "Generating HEX binary: $(notdir $@)"
	$(CMD_ECHO) $(OBJCOPY) -O ihex $< $@

$(BUILD_DIR)/%.o: %.s
	@echo "Compiling ASM file: $(notdir $<)"
	$(CMD_ECHO) $(AS) $(ASFLAGS) $(DEF) $(INC) -c -o $@ $<

$(BUILD_DIR)/%.o: %.c
	@echo "Compiling C file: $(notdir $<)"
	$(CMD_ECHO) $(CC) $(CFLAGS) $(DEF) $(INC) -c -o $@ $<

$(BUILD_DIR)/$(BIN).elf: $(OBJS_ASM) $(OBJS_C)
	@echo "Linking ELF binary: $(notdir $@)"
	$(CMD_ECHO) $(LD) $(LDFLAGS) $(SRC_LD) -o $@ $^ $(LIBS)

	@echo "Generating name list: $(BIN).sym"
	$(CMD_ECHO) $(NM) -n $@ > $(BUILD_DIR)/$(BIN).sym

	@echo "Showing final size:"
	$(CMD_ECHO) ls -la $@

	@echo "Generating disassembly: $(BIN).disasm"
	$(CMD_ECHO) $(OBJDUMP) -S $@ > $(BUILD_DIR)/$(BIN).disasm

$(BUILD_DIR)/$(BIN).a: $(OBJS_ASM) $(OBJS_C)
	@echo "Building static library: $(notdir $@)"
	$(CMD_ECHO) $(AR) -r $@ $^

	@echo "Generating name list: $(BIN).sym"
	$(CMD_ECHO) $(NM) -n $@ > $(BUILD_DIR)/$(BIN).sym

	@echo "Showing final size:"
	$(CMD_ECHO) ls -la $@

	@echo "Generating disassembly: $(BIN).disasm"
	$(CMD_ECHO) $(OBJDUMP) -S $@ > $(BUILD_DIR)/$(BIN).disasm

clean:
	rm -f $(BUILD_DIR)/*.elf $(BUILD_DIR)/*.hex $(BUILD_DIR)/*.map
	rm -f $(BUILD_DIR)/*.o $(BUILD_DIR)/*.a $(BUILD_DIR)/*.sym $(BUILD_DIR)/*.disasm
